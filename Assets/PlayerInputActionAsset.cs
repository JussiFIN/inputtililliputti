//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/PlayerInputActionAsset.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputActionAsset : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputActionAsset()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputActionAsset"",
    ""maps"": [
        {
            ""name"": ""GamePlay"",
            ""id"": ""f8da52b2-4093-45ae-b7fd-3779e0f4c4e5"",
            ""actions"": [
                {
                    ""name"": ""Throttle"",
                    ""type"": ""Value"",
                    ""id"": ""f455faaa-d7b7-4e21-abd1-81374a410c55"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Brake"",
                    ""type"": ""Value"",
                    ""id"": ""e7d88322-9299-412b-8827-b8f9b66e1c14"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Turn"",
                    ""type"": ""Value"",
                    ""id"": ""015a75f3-1f5f-4620-942c-61e747aa79a1"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Change position"",
                    ""type"": ""Value"",
                    ""id"": ""810a0be8-d9c7-476f-9543-f5f98d8a8592"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Balance"",
                    ""type"": ""Value"",
                    ""id"": ""cdfa2b9a-d044-4b0b-ba7a-5e0c64ae875c"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Standup"",
                    ""type"": ""Button"",
                    ""id"": ""4ca1c2cd-8e8e-496c-9cd3-16bb92394c91"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Restart"",
                    ""type"": ""Button"",
                    ""id"": ""d400ad54-91a1-4f86-96c3-6801fd83e0a3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Respawn"",
                    ""type"": ""Button"",
                    ""id"": ""9e4ebf4a-07ce-4c0b-95f8-a1d05f10372f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""OpenMap"",
                    ""type"": ""Button"",
                    ""id"": ""85c54791-bdf5-4853-abf6-08cd57ad2206"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""FreeLook"",
                    ""type"": ""Value"",
                    ""id"": ""567aaf8f-a3c4-41a1-af92-ee0de97d5c0e"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""HudNavigation"",
                    ""type"": ""Value"",
                    ""id"": ""09718126-2573-4996-964b-1761dce089c5"",
                    ""expectedControlType"": ""Dpad"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""6fd11d31-415d-48e0-89a7-58385fcc68ce"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Throttle"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""23467d95-713e-464e-9e45-935a28f69517"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Throttle"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d9cc50fb-a7f8-40fd-8d7c-b6dfcd9d255d"",
                    ""path"": ""<Gamepad>/leftTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Brake"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""020bbfa3-10ba-45e4-acd4-be5e8c35ac58"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Brake"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8285143b-76e0-4904-b4fb-6ebd2a32ef28"",
                    ""path"": ""<Gamepad>/leftStick/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Turn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""c601b239-1954-4b90-b30b-8b911b8918d8"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Turn"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""effa8416-c539-4cc2-9684-5b0d3ff06e15"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Turn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""fa8ec540-870c-4eb1-ac0f-4b5be2483c5b"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Turn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""fa6aafef-902b-4e81-bbe3-11f41eff1b66"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Balance"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""50fa13e5-7bc6-4515-8083-d7a3099df778"",
                    ""path"": ""<Gamepad>/leftStick/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Change position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e3a19ce6-5a97-4689-891e-f30c609351d5"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Restart"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""04562d69-e442-4c35-a9a7-919740d86ee5"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Respawn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c7ccf7c7-4750-4454-892d-c362805ea724"",
                    ""path"": ""<Gamepad>/leftShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Standup"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""60a21c26-9782-4349-82f4-61009d3938e5"",
                    ""path"": ""<Gamepad>/select"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""OpenMap"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""One Modifier"",
                    ""id"": ""9520c62d-8403-46f7-8a7c-11754a61bce7"",
                    ""path"": ""OneModifier"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""FreeLook"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""modifier"",
                    ""id"": ""64af39ce-9b90-4cde-9f90-86bdb3eb320e"",
                    ""path"": ""<Gamepad>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""FreeLook"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""binding"",
                    ""id"": ""ff0ab452-4e3f-4639-97b4-92f83eec9f6a"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""FreeLook"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""e8d54bee-9b57-4eb1-9755-f1f33b987659"",
                    ""path"": ""<Gamepad>/dpad"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HudNavigation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Map"",
            ""id"": ""472a544c-5166-4729-b4da-e40676629946"",
            ""actions"": [
                {
                    ""name"": ""AddMarker"",
                    ""type"": ""Button"",
                    ""id"": ""6a5e883d-47c0-4483-96a2-4041cc8c3d24"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RemoveMarker"",
                    ""type"": ""Button"",
                    ""id"": ""bfb93477-2656-477a-92f9-982988e5c023"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MoveMap"",
                    ""type"": ""Value"",
                    ""id"": ""a664c22c-7c3b-486f-a975-ed613adccaaf"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""RotateMap"",
                    ""type"": ""Value"",
                    ""id"": ""8b1a890a-ab55-49e9-bedb-dd60d2e3859f"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""ZoomMap"",
                    ""type"": ""Value"",
                    ""id"": ""5f6c537d-d9a3-4554-b1f6-9acdbec5a9e8"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""CloseMap"",
                    ""type"": ""Button"",
                    ""id"": ""cc1c51a5-16ce-4a82-811a-91e812c500d9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""bc6668df-4103-4d87-a2e0-d69fcb94dbce"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AddMarker"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e12a9607-1b7c-4c2d-b6b2-8e654a776a7a"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RemoveMarker"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0c4b2d73-1443-4f75-9f07-f5ed83c864f5"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveMap"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""80d2b8fb-b959-4c4b-89f5-aa9b1cd0d159"",
                    ""path"": ""<Gamepad>/rightStick/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotateMap"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cf0e0d56-32c9-4866-a005-82fc3ed717eb"",
                    ""path"": ""<Gamepad>/rightStick/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ZoomMap"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""99edf493-4c68-40e4-9914-b7c982056026"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CloseMap"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""58ac5521-6da2-408a-b249-8569c855dd2a"",
                    ""path"": ""<Gamepad>/select"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CloseMap"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // GamePlay
        m_GamePlay = asset.FindActionMap("GamePlay", throwIfNotFound: true);
        m_GamePlay_Throttle = m_GamePlay.FindAction("Throttle", throwIfNotFound: true);
        m_GamePlay_Brake = m_GamePlay.FindAction("Brake", throwIfNotFound: true);
        m_GamePlay_Turn = m_GamePlay.FindAction("Turn", throwIfNotFound: true);
        m_GamePlay_Changeposition = m_GamePlay.FindAction("Change position", throwIfNotFound: true);
        m_GamePlay_Balance = m_GamePlay.FindAction("Balance", throwIfNotFound: true);
        m_GamePlay_Standup = m_GamePlay.FindAction("Standup", throwIfNotFound: true);
        m_GamePlay_Restart = m_GamePlay.FindAction("Restart", throwIfNotFound: true);
        m_GamePlay_Respawn = m_GamePlay.FindAction("Respawn", throwIfNotFound: true);
        m_GamePlay_OpenMap = m_GamePlay.FindAction("OpenMap", throwIfNotFound: true);
        m_GamePlay_FreeLook = m_GamePlay.FindAction("FreeLook", throwIfNotFound: true);
        m_GamePlay_HudNavigation = m_GamePlay.FindAction("HudNavigation", throwIfNotFound: true);
        // Map
        m_Map = asset.FindActionMap("Map", throwIfNotFound: true);
        m_Map_AddMarker = m_Map.FindAction("AddMarker", throwIfNotFound: true);
        m_Map_RemoveMarker = m_Map.FindAction("RemoveMarker", throwIfNotFound: true);
        m_Map_MoveMap = m_Map.FindAction("MoveMap", throwIfNotFound: true);
        m_Map_RotateMap = m_Map.FindAction("RotateMap", throwIfNotFound: true);
        m_Map_ZoomMap = m_Map.FindAction("ZoomMap", throwIfNotFound: true);
        m_Map_CloseMap = m_Map.FindAction("CloseMap", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // GamePlay
    private readonly InputActionMap m_GamePlay;
    private IGamePlayActions m_GamePlayActionsCallbackInterface;
    private readonly InputAction m_GamePlay_Throttle;
    private readonly InputAction m_GamePlay_Brake;
    private readonly InputAction m_GamePlay_Turn;
    private readonly InputAction m_GamePlay_Changeposition;
    private readonly InputAction m_GamePlay_Balance;
    private readonly InputAction m_GamePlay_Standup;
    private readonly InputAction m_GamePlay_Restart;
    private readonly InputAction m_GamePlay_Respawn;
    private readonly InputAction m_GamePlay_OpenMap;
    private readonly InputAction m_GamePlay_FreeLook;
    private readonly InputAction m_GamePlay_HudNavigation;
    public struct GamePlayActions
    {
        private @PlayerInputActionAsset m_Wrapper;
        public GamePlayActions(@PlayerInputActionAsset wrapper) { m_Wrapper = wrapper; }
        public InputAction @Throttle => m_Wrapper.m_GamePlay_Throttle;
        public InputAction @Brake => m_Wrapper.m_GamePlay_Brake;
        public InputAction @Turn => m_Wrapper.m_GamePlay_Turn;
        public InputAction @Changeposition => m_Wrapper.m_GamePlay_Changeposition;
        public InputAction @Balance => m_Wrapper.m_GamePlay_Balance;
        public InputAction @Standup => m_Wrapper.m_GamePlay_Standup;
        public InputAction @Restart => m_Wrapper.m_GamePlay_Restart;
        public InputAction @Respawn => m_Wrapper.m_GamePlay_Respawn;
        public InputAction @OpenMap => m_Wrapper.m_GamePlay_OpenMap;
        public InputAction @FreeLook => m_Wrapper.m_GamePlay_FreeLook;
        public InputAction @HudNavigation => m_Wrapper.m_GamePlay_HudNavigation;
        public InputActionMap Get() { return m_Wrapper.m_GamePlay; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GamePlayActions set) { return set.Get(); }
        public void SetCallbacks(IGamePlayActions instance)
        {
            if (m_Wrapper.m_GamePlayActionsCallbackInterface != null)
            {
                @Throttle.started -= m_Wrapper.m_GamePlayActionsCallbackInterface.OnThrottle;
                @Throttle.performed -= m_Wrapper.m_GamePlayActionsCallbackInterface.OnThrottle;
                @Throttle.canceled -= m_Wrapper.m_GamePlayActionsCallbackInterface.OnThrottle;
                @Brake.started -= m_Wrapper.m_GamePlayActionsCallbackInterface.OnBrake;
                @Brake.performed -= m_Wrapper.m_GamePlayActionsCallbackInterface.OnBrake;
                @Brake.canceled -= m_Wrapper.m_GamePlayActionsCallbackInterface.OnBrake;
                @Turn.started -= m_Wrapper.m_GamePlayActionsCallbackInterface.OnTurn;
                @Turn.performed -= m_Wrapper.m_GamePlayActionsCallbackInterface.OnTurn;
                @Turn.canceled -= m_Wrapper.m_GamePlayActionsCallbackInterface.OnTurn;
                @Changeposition.started -= m_Wrapper.m_GamePlayActionsCallbackInterface.OnChangeposition;
                @Changeposition.performed -= m_Wrapper.m_GamePlayActionsCallbackInterface.OnChangeposition;
                @Changeposition.canceled -= m_Wrapper.m_GamePlayActionsCallbackInterface.OnChangeposition;
                @Balance.started -= m_Wrapper.m_GamePlayActionsCallbackInterface.OnBalance;
                @Balance.performed -= m_Wrapper.m_GamePlayActionsCallbackInterface.OnBalance;
                @Balance.canceled -= m_Wrapper.m_GamePlayActionsCallbackInterface.OnBalance;
                @Standup.started -= m_Wrapper.m_GamePlayActionsCallbackInterface.OnStandup;
                @Standup.performed -= m_Wrapper.m_GamePlayActionsCallbackInterface.OnStandup;
                @Standup.canceled -= m_Wrapper.m_GamePlayActionsCallbackInterface.OnStandup;
                @Restart.started -= m_Wrapper.m_GamePlayActionsCallbackInterface.OnRestart;
                @Restart.performed -= m_Wrapper.m_GamePlayActionsCallbackInterface.OnRestart;
                @Restart.canceled -= m_Wrapper.m_GamePlayActionsCallbackInterface.OnRestart;
                @Respawn.started -= m_Wrapper.m_GamePlayActionsCallbackInterface.OnRespawn;
                @Respawn.performed -= m_Wrapper.m_GamePlayActionsCallbackInterface.OnRespawn;
                @Respawn.canceled -= m_Wrapper.m_GamePlayActionsCallbackInterface.OnRespawn;
                @OpenMap.started -= m_Wrapper.m_GamePlayActionsCallbackInterface.OnOpenMap;
                @OpenMap.performed -= m_Wrapper.m_GamePlayActionsCallbackInterface.OnOpenMap;
                @OpenMap.canceled -= m_Wrapper.m_GamePlayActionsCallbackInterface.OnOpenMap;
                @FreeLook.started -= m_Wrapper.m_GamePlayActionsCallbackInterface.OnFreeLook;
                @FreeLook.performed -= m_Wrapper.m_GamePlayActionsCallbackInterface.OnFreeLook;
                @FreeLook.canceled -= m_Wrapper.m_GamePlayActionsCallbackInterface.OnFreeLook;
                @HudNavigation.started -= m_Wrapper.m_GamePlayActionsCallbackInterface.OnHudNavigation;
                @HudNavigation.performed -= m_Wrapper.m_GamePlayActionsCallbackInterface.OnHudNavigation;
                @HudNavigation.canceled -= m_Wrapper.m_GamePlayActionsCallbackInterface.OnHudNavigation;
            }
            m_Wrapper.m_GamePlayActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Throttle.started += instance.OnThrottle;
                @Throttle.performed += instance.OnThrottle;
                @Throttle.canceled += instance.OnThrottle;
                @Brake.started += instance.OnBrake;
                @Brake.performed += instance.OnBrake;
                @Brake.canceled += instance.OnBrake;
                @Turn.started += instance.OnTurn;
                @Turn.performed += instance.OnTurn;
                @Turn.canceled += instance.OnTurn;
                @Changeposition.started += instance.OnChangeposition;
                @Changeposition.performed += instance.OnChangeposition;
                @Changeposition.canceled += instance.OnChangeposition;
                @Balance.started += instance.OnBalance;
                @Balance.performed += instance.OnBalance;
                @Balance.canceled += instance.OnBalance;
                @Standup.started += instance.OnStandup;
                @Standup.performed += instance.OnStandup;
                @Standup.canceled += instance.OnStandup;
                @Restart.started += instance.OnRestart;
                @Restart.performed += instance.OnRestart;
                @Restart.canceled += instance.OnRestart;
                @Respawn.started += instance.OnRespawn;
                @Respawn.performed += instance.OnRespawn;
                @Respawn.canceled += instance.OnRespawn;
                @OpenMap.started += instance.OnOpenMap;
                @OpenMap.performed += instance.OnOpenMap;
                @OpenMap.canceled += instance.OnOpenMap;
                @FreeLook.started += instance.OnFreeLook;
                @FreeLook.performed += instance.OnFreeLook;
                @FreeLook.canceled += instance.OnFreeLook;
                @HudNavigation.started += instance.OnHudNavigation;
                @HudNavigation.performed += instance.OnHudNavigation;
                @HudNavigation.canceled += instance.OnHudNavigation;
            }
        }
    }
    public GamePlayActions @GamePlay => new GamePlayActions(this);

    // Map
    private readonly InputActionMap m_Map;
    private IMapActions m_MapActionsCallbackInterface;
    private readonly InputAction m_Map_AddMarker;
    private readonly InputAction m_Map_RemoveMarker;
    private readonly InputAction m_Map_MoveMap;
    private readonly InputAction m_Map_RotateMap;
    private readonly InputAction m_Map_ZoomMap;
    private readonly InputAction m_Map_CloseMap;
    public struct MapActions
    {
        private @PlayerInputActionAsset m_Wrapper;
        public MapActions(@PlayerInputActionAsset wrapper) { m_Wrapper = wrapper; }
        public InputAction @AddMarker => m_Wrapper.m_Map_AddMarker;
        public InputAction @RemoveMarker => m_Wrapper.m_Map_RemoveMarker;
        public InputAction @MoveMap => m_Wrapper.m_Map_MoveMap;
        public InputAction @RotateMap => m_Wrapper.m_Map_RotateMap;
        public InputAction @ZoomMap => m_Wrapper.m_Map_ZoomMap;
        public InputAction @CloseMap => m_Wrapper.m_Map_CloseMap;
        public InputActionMap Get() { return m_Wrapper.m_Map; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MapActions set) { return set.Get(); }
        public void SetCallbacks(IMapActions instance)
        {
            if (m_Wrapper.m_MapActionsCallbackInterface != null)
            {
                @AddMarker.started -= m_Wrapper.m_MapActionsCallbackInterface.OnAddMarker;
                @AddMarker.performed -= m_Wrapper.m_MapActionsCallbackInterface.OnAddMarker;
                @AddMarker.canceled -= m_Wrapper.m_MapActionsCallbackInterface.OnAddMarker;
                @RemoveMarker.started -= m_Wrapper.m_MapActionsCallbackInterface.OnRemoveMarker;
                @RemoveMarker.performed -= m_Wrapper.m_MapActionsCallbackInterface.OnRemoveMarker;
                @RemoveMarker.canceled -= m_Wrapper.m_MapActionsCallbackInterface.OnRemoveMarker;
                @MoveMap.started -= m_Wrapper.m_MapActionsCallbackInterface.OnMoveMap;
                @MoveMap.performed -= m_Wrapper.m_MapActionsCallbackInterface.OnMoveMap;
                @MoveMap.canceled -= m_Wrapper.m_MapActionsCallbackInterface.OnMoveMap;
                @RotateMap.started -= m_Wrapper.m_MapActionsCallbackInterface.OnRotateMap;
                @RotateMap.performed -= m_Wrapper.m_MapActionsCallbackInterface.OnRotateMap;
                @RotateMap.canceled -= m_Wrapper.m_MapActionsCallbackInterface.OnRotateMap;
                @ZoomMap.started -= m_Wrapper.m_MapActionsCallbackInterface.OnZoomMap;
                @ZoomMap.performed -= m_Wrapper.m_MapActionsCallbackInterface.OnZoomMap;
                @ZoomMap.canceled -= m_Wrapper.m_MapActionsCallbackInterface.OnZoomMap;
                @CloseMap.started -= m_Wrapper.m_MapActionsCallbackInterface.OnCloseMap;
                @CloseMap.performed -= m_Wrapper.m_MapActionsCallbackInterface.OnCloseMap;
                @CloseMap.canceled -= m_Wrapper.m_MapActionsCallbackInterface.OnCloseMap;
            }
            m_Wrapper.m_MapActionsCallbackInterface = instance;
            if (instance != null)
            {
                @AddMarker.started += instance.OnAddMarker;
                @AddMarker.performed += instance.OnAddMarker;
                @AddMarker.canceled += instance.OnAddMarker;
                @RemoveMarker.started += instance.OnRemoveMarker;
                @RemoveMarker.performed += instance.OnRemoveMarker;
                @RemoveMarker.canceled += instance.OnRemoveMarker;
                @MoveMap.started += instance.OnMoveMap;
                @MoveMap.performed += instance.OnMoveMap;
                @MoveMap.canceled += instance.OnMoveMap;
                @RotateMap.started += instance.OnRotateMap;
                @RotateMap.performed += instance.OnRotateMap;
                @RotateMap.canceled += instance.OnRotateMap;
                @ZoomMap.started += instance.OnZoomMap;
                @ZoomMap.performed += instance.OnZoomMap;
                @ZoomMap.canceled += instance.OnZoomMap;
                @CloseMap.started += instance.OnCloseMap;
                @CloseMap.performed += instance.OnCloseMap;
                @CloseMap.canceled += instance.OnCloseMap;
            }
        }
    }
    public MapActions @Map => new MapActions(this);
    public interface IGamePlayActions
    {
        void OnThrottle(InputAction.CallbackContext context);
        void OnBrake(InputAction.CallbackContext context);
        void OnTurn(InputAction.CallbackContext context);
        void OnChangeposition(InputAction.CallbackContext context);
        void OnBalance(InputAction.CallbackContext context);
        void OnStandup(InputAction.CallbackContext context);
        void OnRestart(InputAction.CallbackContext context);
        void OnRespawn(InputAction.CallbackContext context);
        void OnOpenMap(InputAction.CallbackContext context);
        void OnFreeLook(InputAction.CallbackContext context);
        void OnHudNavigation(InputAction.CallbackContext context);
    }
    public interface IMapActions
    {
        void OnAddMarker(InputAction.CallbackContext context);
        void OnRemoveMarker(InputAction.CallbackContext context);
        void OnMoveMap(InputAction.CallbackContext context);
        void OnRotateMap(InputAction.CallbackContext context);
        void OnZoomMap(InputAction.CallbackContext context);
        void OnCloseMap(InputAction.CallbackContext context);
    }
}
